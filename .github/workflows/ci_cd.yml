name: CI/CD Pipeline
on:
  push:
    branches: ["main", "dev"]
  pull_request:
    branches: ["main", "dev"]
env:
  AZURE_WEBAPP_NAME: tprestaurant
  AZURE_WEBAPP_PACKAGE_PATH: '.'
  DOTNET_VERSION: '6.0.x'
  DOCKER_IMAGE_NAME: hongquan0312/restaurant
  AZURE_CONTAINER_APP_NAME: thienphurestaurant
  AZURE_RESOURCE_GROUP: TPRestaurentResourceGroup
  AZURE_CONTAINER_APP_ENVIRONMENT: thienphurestaurant-env
  AZURE_LOCATION: eastasia
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore
      - name: Test
        run: dotnet test --no-build --verbosity normal
     
  docker:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Only run for the main branch
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} -f TPRestaurent.BackEndCore.API/Dockerfile .
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
          docker tag ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} ${{ env.DOCKER_IMAGE_NAME }}:latest
          docker push ${{ env.DOCKER_IMAGE_NAME }}:latest

  deploy-to-container-apps:
    needs: docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Only run for the main branch
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Create and wait for Container Apps Environment
        run: |
          echo "Creating Container Apps Environment..."
          az containerapp env create \
            --name ${{ env.AZURE_CONTAINER_APP_ENVIRONMENT }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --location ${{ env.AZURE_LOCATION }}

          echo "Waiting for Container Apps Environment to be ready..."
          while [[ "$(az containerapp env show --name ${{ env.AZURE_CONTAINER_APP_ENVIRONMENT }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query provisioningState -o tsv)" != "Succeeded" ]]; do
            echo "Environment is still provisioning. Waiting..."
            sleep 30
          done
          echo "Container Apps Environment is ready!"

      - name: Deploy to Azure Container Apps
        run: |
          az containerapp create \
            --name ${{ env.AZURE_CONTAINER_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --environment ${{ env.AZURE_CONTAINER_APP_ENVIRONMENT }} \
            --image ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} \
            --target-port 80 \
            --ingress external \
            --registry-server docker.io \
            --registry-username ${{ secrets.DOCKER_HUB_USERNAME }} \
            --registry-password ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} \
            --env-vars ASPNETCORE_ENVIRONMENT=Production

      - name: Azure logout
        run: az logout
        if: always()
