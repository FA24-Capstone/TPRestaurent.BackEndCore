name: CI/CD Pipeline

on:
  push:
    branches: ["main", "dev"]
  pull_request:
    branches: ["main", "dev"]

env:
  AZURE_WEBAPP_PACKAGE_PATH: '.'
  DOTNET_VERSION: '6.0.x'
  ACR_NAME: 'thienphurestaurant'  # Replace with your ACR name
  ACR_IMAGE_NAME: 'restaurant'
  AZURE_CONTAINER_APP_NAME: 'thienphurestaurant'
  AZURE_RESOURCE_GROUP: 'TPRestaurentResourceGroup'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Notify Discord - Start CI/CD
        run: |
          START_TIME=$(TZ="Asia/Ho_Chi_Minh" date)
          curl -H "Content-Type: application/json" \
          -d '{
                "content": "@everyone \n\n=============================== \n\nüöÄ **CI/CD Pipeline Started** \n**Start Time:** '"$START_TIME"' (Vietnam Time) \n**Branch:** '"${{ github.ref }}"' \n=============================== \n\nüîß **Initializing the build process...**"
              }' \
          ${{ secrets.DISCORD_WEBHOOK }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: |
          curl -H "Content-Type: application/json" \
          -d '{
                "content": "üì¶ **Restoring dependencies...**"
              }' \
          ${{ secrets.DISCORD_WEBHOOK }}
          dotnet restore

      - name: Build
        run: |
          curl -H "Content-Type: application/json" \
          -d '{
                "content": "üî® **Building the project...**"
              }' \
          ${{ secrets.DISCORD_WEBHOOK }}
          dotnet build --no-restore

      - name: Run Tests
        run: |
          curl -H "Content-Type: application/json" \
          -d '{
                "content": "üß™ **Running tests...**"
              }' \
          ${{ secrets.DISCORD_WEBHOOK }}
          dotnet test --no-build --verbosity normal

      # Notify about build success/failure
      - name: Notify Discord - Build Success
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
          -d '{
                "content": "‚úÖ **Build completed successfully!**\n\nüéâ All tests passed. \n**Time Taken:** '"$(TZ="Asia/Ho_Chi_Minh" date)"' \n\n"
              }' \
          ${{ secrets.DISCORD_WEBHOOK }}

      - name: Notify Discord - Build Failed
        if: failure()
        run: |
          curl -H "Content-Type: application/json" \
          -d '{
                "content": "‚ùå **Build failed!**\n\n‚ö†Ô∏è Please check the logs for details.\n\n**Time Taken:** '"$(TZ="Asia/Ho_Chi_Minh" date)"'"
              }' \
          ${{ secrets.DISCORD_WEBHOOK }}

  docker:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Only run for the main branch
    steps:
      - uses: actions/checkout@v4

      - name: Notify Discord - Start Docker Build
        run: |
          curl -H "Content-Type: application/json" \
          -d '{
                "content": "üîÑ Proceeding to Docker image build...üîÑ\n\n **Starting Docker image build...**\n\nüîç Building the image from the Dockerfile. Please wait...\n**Branch:** '"${{ github.ref }}"' \n**Commit:** '"${{ github.sha }}"' \n"
              }' \
          ${{ secrets.DISCORD_WEBHOOK }}

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Build Docker image
        run: |
          curl -H "Content-Type: application/json" \
          -d '{
                "content": "üê≥ **Building Docker image...**"
              }' \
          ${{ secrets.DISCORD_WEBHOOK }}
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.ACR_IMAGE_NAME }}:${{ github.sha }} -f TPRestaurent.BackEndCore.API/Dockerfile .

      - name: Push Docker image to ACR
        run: |
          curl -H "Content-Type: application/json" \
          -d '{
                "content": "üì§ **Pushing Docker image to ACR...**"
              }' \
          ${{ secrets.DISCORD_WEBHOOK }}
          docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.ACR_IMAGE_NAME }}:${{ github.sha }}
          docker tag ${{ env.ACR_NAME }}.azurecr.io/${{ env.ACR_IMAGE_NAME }}:${{ github.sha }} ${{ env.ACR_NAME }}.azurecr.io/${{ env.ACR_IMAGE_NAME }}:latest
          docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.ACR_IMAGE_NAME }}:latest

      - name: Azure logout
        run: az logout
        if: always()

      # Notify about Docker success/failure
      - name: Notify Discord - Docker Success
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
          -d '{
                "content": "‚úÖ **Docker image built and pushed successfully!**\n\nüîó Available on ACR as: **'"${{ env.ACR_NAME }}.azurecr.io/${{ env.ACR_IMAGE_NAME }}"'**.\n**Commit:** '"${{ github.sha }}"' \n\n"
              }' \
          ${{ secrets.DISCORD_WEBHOOK }}

      - name: Notify Discord - Docker Failed
        if: failure()
        run: |
          curl -H "Content-Type: application/json" \
          -d '{
                "content": "‚ùå **Docker build or push failed!**\n\n‚ö†Ô∏è Check the logs for details.\n\n**Time Taken:** '"$(TZ="Asia/Ho_Chi_Minh" date)"'"
              }' \
          ${{ secrets.DISCORD_WEBHOOK }}

  deploy-to-container-apps:
    needs: docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Only run for the main branch
    steps:
      - name: Notify Discord - Start Deployment
        run: |
          curl -H "Content-Type: application/json" \
          -d '{
                "content": "üì¶ Proceeding to deployment...\n\n üöÄ **Starting deployment to Azure Container Apps...**\n\nüîÑ Deploying the latest Docker image.\n**Image:** '"${{ env.ACR_NAME }}.azurecr.io/${{ env.ACR_IMAGE_NAME }}:${{ github.sha }}"' \n"
              }' \
          ${{ secrets.DISCORD_WEBHOOK }}

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Container Apps
        uses: azure/container-apps-deploy-action@v1
        with:
          containerAppName: ${{ env.AZURE_CONTAINER_APP_NAME }}
          resourceGroup: ${{ env.AZURE_RESOURCE_GROUP }}
          imageToDeploy: ${{ env.ACR_NAME }}.azurecr.io/${{ env.ACR_IMAGE_NAME }}:${{ github.sha }}
          registryUrl: ${{ env.ACR_NAME }}.azurecr.io
          registryUsername: ${{ secrets.AZURE_CREDENTIALS_USERNAME }}
          registryPassword: ${{ secrets.AZURE_CREDENTIALS_PASSWORD }}
          location: 'southeastasia'

      - name: Azure logout
        run: az logout
        if: always()

      # Notify about deployment success/failure
      - name: Notify Discord - Deployment Successful
        if: success()
        run: |
          END_TIME=$(TZ="Asia/Ho_Chi_Minh" date)
          curl -H "Content-Type: application/json" \
          -d '{
                "content": "@everyone \n\n=============================== \n\nüéâ **Deployment Successful!** \n**End Time:** '"$END_TIME"' (Vietnam Time) \n**Branch:** '"${{ github.ref }}"' \n**Image Deployed:** '"${{ env.ACR_NAME }}.azurecr.io/${{ env.ACR_IMAGE_NAME }}:${{ github.sha }}"' \n=============================== \n\nüöÄ The deployment to Azure Container Apps was successful!"
              }' \
          ${{ secrets.DISCORD_WEBHOOK }}

      - name: Notify Discord - Deployment Failed
        if: failure()
        run: |
          END_TIME=$(TZ="Asia/Ho_Chi_Minh" date)
          curl -H "Content-Type: application/json" \
          -d '{
                "content": "@everyone \n\n=============================== \n\n‚ùå **Deployment Failed!** \n**End Time:** '"$END_TIME"' (Vietnam Time) \n**Branch:** '"${{ github.ref }}"' \n=============================== \n\n‚ö†Ô∏è Please check the logs for more details."
              }' \
          ${{ secrets.DISCORD_WEBHOOK }}
