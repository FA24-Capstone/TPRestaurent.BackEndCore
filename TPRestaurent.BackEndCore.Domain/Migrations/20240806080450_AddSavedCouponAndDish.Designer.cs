// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TPRestaurent.BackEndCore.Domain.Data;

#nullable disable

namespace TPRestaurent.BackEndCore.Domain.Migrations
{
    [DbContext(typeof(TPRestaurentDBContext))]
    [Migration("20240806080450_AddSavedCouponAndDish")]
    partial class AddSavedCouponAndDish
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "85b6791c-49d8-4a61-ad0b-8274ec27e764",
                            ConcurrencyStamp = "85b6791c-49d8-4a61-ad0b-8274ec27e764",
                            Name = "STAFF",
                            NormalizedName = "staff"
                        },
                        new
                        {
                            Id = "814f9270-78f5-4503-b7d3-0c567e5812ba",
                            ConcurrencyStamp = "814f9270-78f5-4503-b7d3-0c567e5812ba",
                            Name = "MANAGER",
                            NormalizedName = "manager"
                        },
                        new
                        {
                            Id = "000f9270-78f5-4503-b7d3-0c567e5812ba",
                            ConcurrencyStamp = "000f9270-78f5-4503-b7d3-0c567e5812ba",
                            Name = "CHEF",
                            NormalizedName = "chef"
                        },
                        new
                        {
                            Id = "02962efa-1273-46c0-b103-7167b1742ef3",
                            ConcurrencyStamp = "02962efa-1273-46c0-b103-7167b1742ef3",
                            Name = "CUSTOMER",
                            NormalizedName = "customer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerifyCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Blog", b =>
                {
                    b.Property<Guid>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BlogId");

                    b.HasIndex("CreateBy");

                    b.HasIndex("UpdateBy");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Combo", b =>
                {
                    b.Property<Guid>("ComboId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ComboId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Combos");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Configuration", b =>
                {
                    b.Property<Guid>("ConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActiveValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConfigurationId");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Coupon", b =>
                {
                    b.Property<Guid>("CouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MinimumAmount")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CouponId");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.CustomerInfo", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LoyaltyPoint")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.HasIndex("AccountId");

                    b.ToTable("CustomerInfos");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.CustomerInfoAddress", b =>
                {
                    b.Property<Guid>("CustomerInfoAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerInfoAddressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CustomerInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCurrentUsed")
                        .HasColumnType("bit");

                    b.HasKey("CustomerInfoAddressId");

                    b.HasIndex("CustomerInfoId");

                    b.ToTable("CustomerInfoAddress");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.CustomerLovedDish", b =>
                {
                    b.Property<Guid>("CustomerLovedDishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Combo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ComboId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DishId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CustomerLovedDishId");

                    b.HasIndex("CustomerInfoId");

                    b.HasIndex("DishId");

                    b.ToTable("CustomerLovedDishes");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.CustomerSavedCoupon", b =>
                {
                    b.Property<Guid>("CustomerSavedCouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CouponId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsUsedOrExpired")
                        .HasColumnType("bit");

                    b.HasKey("CustomerSavedCouponId");

                    b.HasIndex("CouponId");

                    b.HasIndex("CustomerInfoId");

                    b.ToTable("CustomerSavedCoupons");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Dish", b =>
                {
                    b.Property<Guid>("DishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DishItemTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("bit");

                    b.HasKey("DishId");

                    b.HasIndex("DishItemTypeId");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.DishCombo", b =>
                {
                    b.Property<Guid>("DishComboId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComboId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DishSizeDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasOptions")
                        .HasColumnType("bit");

                    b.Property<int?>("OptionSetNumber")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("DishComboId");

                    b.HasIndex("ComboId");

                    b.HasIndex("DishSizeDetailId");

                    b.ToTable("DishCombos");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.DishSizeDetail", b =>
                {
                    b.Property<Guid>("DishSizeDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<Guid?>("DishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DishSizeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("DishSizeDetailId");

                    b.HasIndex("DishId");

                    b.HasIndex("DishSizeId");

                    b.ToTable("DishSizeDetails");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.DishTag", b =>
                {
                    b.Property<Guid>("DishTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DishTagId");

                    b.HasIndex("DishId");

                    b.HasIndex("TagId");

                    b.ToTable("DishTags");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.EnumModels.ComboCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ComboCategories");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "HOTPOT"
                        },
                        new
                        {
                            Id = 1,
                            Name = "BBQ"
                        },
                        new
                        {
                            Id = 2,
                            Name = "BOTH"
                        });
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.EnumModels.DishItemType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DishItemTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "APPETIZER"
                        },
                        new
                        {
                            Id = 1,
                            Name = "SOUP"
                        },
                        new
                        {
                            Id = 2,
                            Name = "HOTPOT"
                        },
                        new
                        {
                            Id = 3,
                            Name = "BBQ"
                        },
                        new
                        {
                            Id = 4,
                            Name = "HOTPOT_BROTH"
                        },
                        new
                        {
                            Id = 5,
                            Name = "HOTPOT_MEAT"
                        },
                        new
                        {
                            Id = 6,
                            Name = "HOTPOT_SEAFOOD"
                        },
                        new
                        {
                            Id = 7,
                            Name = "HOTPOT_VEGGIE"
                        },
                        new
                        {
                            Id = 8,
                            Name = "BBQ_MEAT"
                        },
                        new
                        {
                            Id = 9,
                            Name = "BBQ_SEAFOOD"
                        },
                        new
                        {
                            Id = 10,
                            Name = "HOTPOT_TOPPING"
                        },
                        new
                        {
                            Id = 11,
                            Name = "BBQ_TOPPING"
                        },
                        new
                        {
                            Id = 12,
                            Name = "SIDEDISH"
                        },
                        new
                        {
                            Id = 13,
                            Name = "DRINK"
                        },
                        new
                        {
                            Id = 14,
                            Name = "DESSERT"
                        },
                        new
                        {
                            Id = 15,
                            Name = "SAUCE"
                        });
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.EnumModels.DishSize", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DishSizes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "SMALL"
                        },
                        new
                        {
                            Id = 1,
                            Name = "MEDIUM"
                        },
                        new
                        {
                            Id = 2,
                            Name = "LARGE"
                        });
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.EnumModels.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Processing"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cancelled"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Delivering"
                        });
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.EnumModels.OTPType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OTPTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Login"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Register"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ForgotPassword"
                        },
                        new
                        {
                            Id = 3,
                            Name = "ChangePassword"
                        },
                        new
                        {
                            Id = 4,
                            Name = "ChangeEmail"
                        },
                        new
                        {
                            Id = 5,
                            Name = "ChangePhone"
                        },
                        new
                        {
                            Id = 6,
                            Name = "ConfirmEmail"
                        },
                        new
                        {
                            Id = 7,
                            Name = "ConfirmPhone"
                        },
                        new
                        {
                            Id = 8,
                            Name = "ConfirmPayment"
                        });
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.EnumModels.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cash"
                        },
                        new
                        {
                            Id = 2,
                            Name = "VNPAY"
                        },
                        new
                        {
                            Id = 3,
                            Name = "MOMO"
                        },
                        new
                        {
                            Id = 4,
                            Name = "ZALOPAY"
                        });
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.EnumModels.RatingPoint", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RatingPoints");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "One"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Two"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Three"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Four"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Five"
                        });
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.EnumModels.ReservationRequestStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReservationRequestStatuses");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "PENDING"
                        },
                        new
                        {
                            Id = 1,
                            Name = "SUCCESSFUL"
                        },
                        new
                        {
                            Id = 2,
                            Name = "FAILED"
                        });
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.EnumModels.ReservationStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReservationStatuses");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "PENDING"
                        },
                        new
                        {
                            Id = 1,
                            Name = "PAID"
                        },
                        new
                        {
                            Id = 2,
                            Name = "DINING"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CANCELLED"
                        });
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.EnumModels.TableSize", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TableSizes");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Name = "TWO"
                        },
                        new
                        {
                            Id = 4,
                            Name = "FOUR"
                        },
                        new
                        {
                            Id = 6,
                            Name = "SIX"
                        },
                        new
                        {
                            Id = 8,
                            Name = "EIGHT"
                        },
                        new
                        {
                            Id = 10,
                            Name = "TEN"
                        });
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.LoyalPointsHistory", b =>
                {
                    b.Property<Guid>("LoyalPointsHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NewBalance")
                        .HasColumnType("int");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PointChanged")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("LoyalPointsHistoryId");

                    b.HasIndex("OrderId");

                    b.ToTable("LoyalPointsHistories");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerSavedCouponId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LoyalPointsHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReservationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.HasKey("OrderId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerSavedCouponId");

                    b.HasIndex("LoyalPointsHistoryId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ReservationId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.OrderDetail", b =>
                {
                    b.Property<Guid>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ComboId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DishSizeDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("ComboId");

                    b.HasIndex("DishSizeDetailId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.OTP", b =>
                {
                    b.Property<Guid>("OTPId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiredTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("OTPId");

                    b.HasIndex("AccountId");

                    b.ToTable("OTPs");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Rating", b =>
                {
                    b.Property<Guid>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PointId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RatingId");

                    b.HasIndex("CreateBy");

                    b.HasIndex("DishId");

                    b.HasIndex("PointId");

                    b.HasIndex("UpdateBy");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Reservation", b =>
                {
                    b.Property<Guid>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Deposit")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("ReservationId");

                    b.HasIndex("CustomerAccountId");

                    b.HasIndex("StatusId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.ReservationDish", b =>
                {
                    b.Property<Guid>("ReservationDishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ComboId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DishSizeDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReservationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReservationDishId");

                    b.HasIndex("ComboId");

                    b.HasIndex("DishSizeDetailId");

                    b.HasIndex("ReservationId");

                    b.ToTable("ReservationDishes");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.ReservationRequest", b =>
                {
                    b.Property<Guid>("ReservationRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReservationDishes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ReservationRequestId");

                    b.HasIndex("CreateBy");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdateBy");

                    b.ToTable("ReservationRequests");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.ReservationTableDetail", b =>
                {
                    b.Property<Guid>("ReservationTableDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReservationTableDetailId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("TableId");

                    b.ToTable("ReservationTableDetail");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.StaticFile", b =>
                {
                    b.Property<Guid>("StaticFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BlogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ComboId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RatingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StaticFileId");

                    b.HasIndex("BlogId");

                    b.HasIndex("ComboId");

                    b.HasIndex("DishId");

                    b.HasIndex("RatingId");

                    b.ToTable("StaticFiles");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.StoreCredit", b =>
                {
                    b.Property<Guid>("StoreCreditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid>("CustomerInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StoreCreditId");

                    b.HasIndex("CustomerInfoId");

                    b.ToTable("StoreCredits");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.StoreCreditHistory", b =>
                {
                    b.Property<Guid>("StoreCreditHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsInput")
                        .HasColumnType("bit");

                    b.Property<Guid>("StoreCreditId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StoreCreditHistoryId");

                    b.HasIndex("StoreCreditId");

                    b.ToTable("StoreCreditHistories");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Table", b =>
                {
                    b.Property<Guid>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TableRatingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TableSizeId")
                        .HasColumnType("int");

                    b.HasKey("TableId");

                    b.HasIndex("TableRatingId");

                    b.HasIndex("TableSizeId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.TableRating", b =>
                {
                    b.Property<Guid>("TableRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TableRatingId");

                    b.ToTable("TableRatings");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Tag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Token", b =>
                {
                    b.Property<Guid>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessTokenValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDateAccessToken")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateRefreshToken")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryTimeAccessToken")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryTimeRefreshToken")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshTokenValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TokenId");

                    b.HasIndex("AccountId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReservationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ReservationId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Account", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.CustomerInfo", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Blog", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Account", "CreateByAccount")
                        .WithMany()
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Account", "UpdateByAccount")
                        .WithMany()
                        .HasForeignKey("UpdateBy");

                    b.Navigation("CreateByAccount");

                    b.Navigation("UpdateByAccount");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Combo", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.EnumModels.ComboCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.CustomerInfo", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.CustomerInfoAddress", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.CustomerInfo", "CustomerInfo")
                        .WithMany()
                        .HasForeignKey("CustomerInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerInfo");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.CustomerLovedDish", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.CustomerInfo", "CustomerInfo")
                        .WithMany()
                        .HasForeignKey("CustomerInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId");

                    b.Navigation("CustomerInfo");

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.CustomerSavedCoupon", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Coupon", "Coupon")
                        .WithMany()
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.CustomerInfo", "CustomerInfo")
                        .WithMany()
                        .HasForeignKey("CustomerInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("CustomerInfo");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Dish", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.EnumModels.DishItemType", "DishItemType")
                        .WithMany()
                        .HasForeignKey("DishItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DishItemType");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.DishCombo", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Combo", "Combo")
                        .WithMany()
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.DishSizeDetail", "DishSizeDetail")
                        .WithMany()
                        .HasForeignKey("DishSizeDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("DishSizeDetail");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.DishSizeDetail", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId");

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.EnumModels.DishSize", "DishSize")
                        .WithMany()
                        .HasForeignKey("DishSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("DishSize");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.DishTag", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId");

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId");

                    b.Navigation("Dish");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.LoyalPointsHistory", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Order", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.CustomerInfo", "CustomerInfo")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.CustomerSavedCoupon", "CustomerSavedCoupon")
                        .WithMany()
                        .HasForeignKey("CustomerSavedCouponId");

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.LoyalPointsHistory", "LoyalPointsHistory")
                        .WithMany()
                        .HasForeignKey("LoyalPointsHistoryId");

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.EnumModels.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId");

                    b.Navigation("Account");

                    b.Navigation("CustomerInfo");

                    b.Navigation("CustomerSavedCoupon");

                    b.Navigation("LoyalPointsHistory");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.OrderDetail", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Combo", "Combo")
                        .WithMany()
                        .HasForeignKey("ComboId");

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.DishSizeDetail", "DishSizeDetail")
                        .WithMany()
                        .HasForeignKey("DishSizeDetailId");

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("DishSizeDetail");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.OTP", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Rating", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Account", "CreateByAccount")
                        .WithMany()
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId");

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.EnumModels.RatingPoint", "Point")
                        .WithMany()
                        .HasForeignKey("PointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Account", "UpdateByAccount")
                        .WithMany()
                        .HasForeignKey("UpdateBy");

                    b.Navigation("CreateByAccount");

                    b.Navigation("Dish");

                    b.Navigation("Point");

                    b.Navigation("UpdateByAccount");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Reservation", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Account", "CustomerAccount")
                        .WithMany()
                        .HasForeignKey("CustomerAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.EnumModels.ReservationStatus", "ReservationStatus")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerAccount");

                    b.Navigation("ReservationStatus");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.ReservationDish", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Combo", "Combo")
                        .WithMany()
                        .HasForeignKey("ComboId");

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.DishSizeDetail", "DishSizeDetail")
                        .WithMany()
                        .HasForeignKey("DishSizeDetailId");

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId");

                    b.Navigation("Combo");

                    b.Navigation("DishSizeDetail");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.ReservationRequest", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Account", "CreateByAccount")
                        .WithMany()
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.EnumModels.ReservationRequestStatus", "ReservationRequestStatus")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Account", "UpdateByAccount")
                        .WithMany()
                        .HasForeignKey("UpdateBy");

                    b.Navigation("CreateByAccount");

                    b.Navigation("ReservationRequestStatus");

                    b.Navigation("UpdateByAccount");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.ReservationTableDetail", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.StaticFile", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Blog", "Blog")
                        .WithMany()
                        .HasForeignKey("BlogId");

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Combo", "Combo")
                        .WithMany()
                        .HasForeignKey("ComboId");

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId");

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId");

                    b.Navigation("Blog");

                    b.Navigation("Combo");

                    b.Navigation("Dish");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.StoreCredit", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.CustomerInfo", "CustomerInfo")
                        .WithMany()
                        .HasForeignKey("CustomerInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerInfo");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.StoreCreditHistory", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.StoreCredit", "StoreCredit")
                        .WithMany()
                        .HasForeignKey("StoreCreditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreCredit");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Table", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.TableRating", "TableRating")
                        .WithMany()
                        .HasForeignKey("TableRatingId");

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.EnumModels.TableSize", "TableSize")
                        .WithMany()
                        .HasForeignKey("TableSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TableRating");

                    b.Navigation("TableSize");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Token", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Transaction", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.EnumModels.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId");

                    b.Navigation("Order");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Reservation");
                });
#pragma warning restore 612, 618
        }
    }
}
