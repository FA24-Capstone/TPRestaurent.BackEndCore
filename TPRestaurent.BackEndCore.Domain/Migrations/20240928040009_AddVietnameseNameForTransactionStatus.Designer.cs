// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TPRestaurent.BackEndCore.Domain.Data;

#nullable disable

namespace TPRestaurent.BackEndCore.Domain.Migrations
{
    [DbContext(typeof(TPRestaurentDBContext))]
    [Migration("20240928040009_AddVietnameseNameForTransactionStatus")]
    partial class AddVietnameseNameForTransactionStatus
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "85b6791c-49d8-4a61-ad0b-8274ec27e764",
                            ConcurrencyStamp = "85b6791c-49d8-4a61-ad0b-8274ec27e764",
                            Name = "SHIPPER",
                            NormalizedName = "shipper"
                        },
                        new
                        {
                            Id = "814f9270-78f5-4503-b7d3-0c567e5812ba",
                            ConcurrencyStamp = "814f9270-78f5-4503-b7d3-0c567e5812ba",
                            Name = "ADMIN",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "000f9270-78f5-4503-b7d3-0c567e5812ba",
                            ConcurrencyStamp = "000f9270-78f5-4503-b7d3-0c567e5812ba",
                            Name = "CHEF",
                            NormalizedName = "chef"
                        },
                        new
                        {
                            Id = "02962efa-1273-46c0-b103-7167b1742ef3",
                            ConcurrencyStamp = "02962efa-1273-46c0-b103-7167b1742ef3",
                            Name = "CUSTOMER",
                            NormalizedName = "customer"
                        },
                        new
                        {
                            Id = "12962efa-1273-46c0-b103-7167b1742ef3",
                            ConcurrencyStamp = "12962efa-1273-46c0-b103-7167b1742ef3",
                            Name = "DEVICE",
                            NormalizedName = "device"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsManuallyCreated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LoyaltyPoint")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Blog", b =>
                {
                    b.Property<Guid>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BlogId");

                    b.HasIndex("CreateBy");

                    b.HasIndex("UpdateBy");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Combo", b =>
                {
                    b.Property<Guid>("ComboId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ComboId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Combos");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.ComboOptionSet", b =>
                {
                    b.Property<Guid>("ComboOptionSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComboId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DishItemTypeId")
                        .HasColumnType("int");

                    b.Property<int>("NumOfChoice")
                        .HasColumnType("int");

                    b.Property<int>("OptionSetNumber")
                        .HasColumnType("int");

                    b.HasKey("ComboOptionSetId");

                    b.HasIndex("ComboId");

                    b.HasIndex("DishItemTypeId");

                    b.ToTable("ComboOptionSets");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.ComboOrderDetail", b =>
                {
                    b.Property<Guid>("ComboOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DishComboId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ComboOrderDetailId");

                    b.HasIndex("DishComboId");

                    b.HasIndex("OrderDetailId");

                    b.ToTable("DishComboComboDetails");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Configuration", b =>
                {
                    b.Property<Guid>("ConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrentValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VietnameseName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConfigurationId");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.ConfigurationVersion", b =>
                {
                    b.Property<Guid>("ConfigurationVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActiveValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ConfigurationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ConfigurationVersionId");

                    b.HasIndex("ConfigurationId");

                    b.ToTable("ConfigurationVersions");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.CouponProgram", b =>
                {
                    b.Property<Guid>("CouponProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MinimumAmount")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CouponProgramId");

                    b.HasIndex("AccountId");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.CustomerInfoAddress", b =>
                {
                    b.Property<Guid>("CustomerInfoAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomerInfoAddressName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCurrentUsed")
                        .HasColumnType("bit");

                    b.HasKey("CustomerInfoAddressId");

                    b.HasIndex("AccountId");

                    b.ToTable("CustomerInfoAddress");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Device", b =>
                {
                    b.Property<Guid>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DevicePassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DeviceId");

                    b.HasIndex("TableId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Dish", b =>
                {
                    b.Property<Guid>("DishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DishItemTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PreparationTime")
                        .HasColumnType("int");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("bit");

                    b.HasKey("DishId");

                    b.HasIndex("DishItemTypeId");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.DishCombo", b =>
                {
                    b.Property<Guid>("DishComboId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ComboOptionSetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DishSizeDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("DishComboId");

                    b.HasIndex("ComboOptionSetId");

                    b.HasIndex("DishSizeDetailId");

                    b.ToTable("DishCombos");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.DishSizeDetail", b =>
                {
                    b.Property<Guid>("DishSizeDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<Guid?>("DishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DishSizeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("DishSizeDetailId");

                    b.HasIndex("DishId");

                    b.HasIndex("DishSizeId");

                    b.ToTable("DishSizeDetails");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.DishTag", b =>
                {
                    b.Property<Guid>("DishTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DishTagId");

                    b.HasIndex("DishId");

                    b.HasIndex("TagId");

                    b.ToTable("DishTags");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.EnumModels.ComboCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VietnameseName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ComboCategories");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "HOTPOT",
                            VietnameseName = "Lẩu"
                        },
                        new
                        {
                            Id = 1,
                            Name = "BBQ",
                            VietnameseName = "Nướng"
                        },
                        new
                        {
                            Id = 2,
                            Name = "BOTH",
                            VietnameseName = "Lẩu-Nướng"
                        });
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.EnumModels.DishItemType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VietnameseName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DishItemTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "APPETIZER",
                            VietnameseName = "Khai Vị"
                        },
                        new
                        {
                            Id = 1,
                            Name = "SOUP",
                            VietnameseName = "Súp"
                        },
                        new
                        {
                            Id = 2,
                            Name = "HOTPOT",
                            VietnameseName = "Lẩu"
                        },
                        new
                        {
                            Id = 3,
                            Name = "BBQ",
                            VietnameseName = "Nướng"
                        },
                        new
                        {
                            Id = 4,
                            Name = "HOTPOT_BROTH",
                            VietnameseName = "Nước Lẩu"
                        },
                        new
                        {
                            Id = 5,
                            Name = "HOTPOT_MEAT",
                            VietnameseName = "Thịt Lẩu"
                        },
                        new
                        {
                            Id = 6,
                            Name = "HOTPOT_SEAFOOD",
                            VietnameseName = "Hải Sản Lẩu"
                        },
                        new
                        {
                            Id = 7,
                            Name = "HOTPOT_VEGGIE",
                            VietnameseName = "Rau Lẩu"
                        },
                        new
                        {
                            Id = 8,
                            Name = "BBQ_MEAT",
                            VietnameseName = "Thịt Nướng"
                        },
                        new
                        {
                            Id = 9,
                            Name = "BBQ_SEAFOOD",
                            VietnameseName = "Hải Sản Nướng"
                        },
                        new
                        {
                            Id = 10,
                            Name = "HOTPOT_TOPPING",
                            VietnameseName = "Topping Thả Lẩu"
                        },
                        new
                        {
                            Id = 11,
                            Name = "BBQ_TOPPING",
                            VietnameseName = "Topping Nướng"
                        },
                        new
                        {
                            Id = 12,
                            Name = "SIDEDISH",
                            VietnameseName = "Món Phụ"
                        },
                        new
                        {
                            Id = 13,
                            Name = "DRINK",
                            VietnameseName = "Đồ Uống"
                        },
                        new
                        {
                            Id = 14,
                            Name = "DESSERT",
                            VietnameseName = "Tráng Miệng"
                        },
                        new
                        {
                            Id = 15,
                            Name = "SAUCE",
                            VietnameseName = "Sốt"
                        });
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.EnumModels.DishSize", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VietnameseName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DishSizes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "SMALL",
                            VietnameseName = "Nhỏ"
                        },
                        new
                        {
                            Id = 1,
                            Name = "MEDIUM",
                            VietnameseName = "Vừa"
                        },
                        new
                        {
                            Id = 2,
                            Name = "LARGE",
                            VietnameseName = "Lớn"
                        });
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.EnumModels.OrderDetailStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VietnameseName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderDetailStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pending",
                            VietnameseName = "Chờ Xử Lý"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Unchecked",
                            VietnameseName = "Chưa Xem"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Read",
                            VietnameseName = "Đã Xem"
                        },
                        new
                        {
                            Id = 4,
                            Name = "ReadyToServe"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cancelled",
                            VietnameseName = "Đã Huỷ"
                        });
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.EnumModels.OrderSessionStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VietnameseName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderSessionStatuses");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "PreOrder",
                            VietnameseName = "Đã đặt trước"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Confirmed",
                            VietnameseName = "Xác nhận"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Processing",
                            VietnameseName = "Đang Xử Lý"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Completed",
                            VietnameseName = "Thành Công"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cancelled",
                            VietnameseName = "Đã Huỷ"
                        });
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.EnumModels.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VietnameseName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "TableAssigned",
                            VietnameseName = "Đã Xếp Bàn"
                        },
                        new
                        {
                            Id = 2,
                            Name = "DepositPaid",
                            VietnameseName = "Đã Đặt Cọc"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Dining",
                            VietnameseName = "Đang Dùng Bữa"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Pending",
                            VietnameseName = "Chờ Xử Lý"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Processing",
                            VietnameseName = "Đang Xử Lý"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Delivering",
                            VietnameseName = "Đang Giao"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Completed",
                            VietnameseName = "Thành Công"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Cancelled",
                            VietnameseName = "Đã Huỷ"
                        });
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.EnumModels.OrderType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VietnameseName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Reservation",
                            VietnameseName = "Đặt bàn"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Delivery",
                            VietnameseName = "Giao hàng tận nơi"
                        },
                        new
                        {
                            Id = 3,
                            Name = "MealWithoutReservation",
                            VietnameseName = "Dùng bữa tại quán khôn có đặt bàn"
                        });
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.EnumModels.OTPType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VietnameseName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OTPTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Login",
                            VietnameseName = "Đăng Nhập"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Register",
                            VietnameseName = "Đăng Ký"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ForgotPassword",
                            VietnameseName = "Quên Mật Khẩu"
                        },
                        new
                        {
                            Id = 3,
                            Name = "ChangePassword",
                            VietnameseName = "Đổi Mật Khẩu"
                        },
                        new
                        {
                            Id = 4,
                            Name = "ChangeEmail",
                            VietnameseName = "Đổi Email"
                        },
                        new
                        {
                            Id = 5,
                            Name = "ChangePhone",
                            VietnameseName = "Đổi SĐT"
                        },
                        new
                        {
                            Id = 6,
                            Name = "ConfirmEmail",
                            VietnameseName = "Xác Nhận Email"
                        },
                        new
                        {
                            Id = 7,
                            Name = "ConfirmPhone",
                            VietnameseName = "Xác Nhận SĐT"
                        },
                        new
                        {
                            Id = 8,
                            Name = "ConfirmPayment",
                            VietnameseName = "Xác Nhận Thanh Toán"
                        },
                        new
                        {
                            Id = 9,
                            Name = "VerifyForReservation",
                            VietnameseName = "Xác Nhận Đặt Bàn"
                        });
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.EnumModels.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VietnameseName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cash",
                            VietnameseName = "Tiền Mặt"
                        },
                        new
                        {
                            Id = 2,
                            Name = "VNPAY",
                            VietnameseName = "VNPAY"
                        },
                        new
                        {
                            Id = 3,
                            Name = "MOMO",
                            VietnameseName = "MOMO"
                        },
                        new
                        {
                            Id = 4,
                            Name = "ZALOPAY",
                            VietnameseName = "ZALOPAY"
                        },
                        new
                        {
                            Id = 5,
                            Name = "STORE_CREDIT",
                            VietnameseName = "Số dư tài khoản"
                        });
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.EnumModels.RatingPoint", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VietnameseName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RatingPoints");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "One",
                            VietnameseName = "1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Two",
                            VietnameseName = "2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Three",
                            VietnameseName = "3"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Four",
                            VietnameseName = "4"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Five",
                            VietnameseName = "5"
                        });
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.EnumModels.TableSize", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VietnameseName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TableSizes");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Name = "TWO",
                            VietnameseName = "2"
                        },
                        new
                        {
                            Id = 4,
                            Name = "FOUR",
                            VietnameseName = "4"
                        },
                        new
                        {
                            Id = 6,
                            Name = "SIX",
                            VietnameseName = "6"
                        },
                        new
                        {
                            Id = 8,
                            Name = "EIGHT",
                            VietnameseName = "8"
                        },
                        new
                        {
                            Id = 10,
                            Name = "TEN",
                            VietnameseName = "10"
                        });
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.EnumModels.TransactionType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VietnameseName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransactionTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Deposit",
                            VietnameseName = "Đặt cọc"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Order",
                            VietnameseName = "Đơn"
                        },
                        new
                        {
                            Id = 2,
                            Name = "CreditStore",
                            VietnameseName = "Nạp tài khoản"
                        });
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.EnumModels.TransationStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VietnameseName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransationStatus");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "PENDING",
                            VietnameseName = "Chờ Xử Lý"
                        },
                        new
                        {
                            Id = 1,
                            Name = "FAILED",
                            VietnameseName = "Thất Bại"
                        },
                        new
                        {
                            Id = 2,
                            Name = "SUCCESSFUL",
                            VietnameseName = "Thành Công"
                        },
                        new
                        {
                            Id = 3,
                            Name = "APPLIED",
                            VietnameseName = "Đã áp dụng"
                        });
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Image", b =>
                {
                    b.Property<Guid>("StaticFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BlogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ComboId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RatingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StaticFileId");

                    b.HasIndex("BlogId");

                    b.HasIndex("ComboId");

                    b.HasIndex("DishId");

                    b.HasIndex("RatingId");

                    b.ToTable("StaticFiles");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.LoyalPointsHistory", b =>
                {
                    b.Property<Guid>("LoyalPointsHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NewBalance")
                        .HasColumnType("int");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PointChanged")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("LoyalPointsHistoryId");

                    b.HasIndex("OrderId");

                    b.ToTable("LoyalPointsHistories");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Deposit")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LoyalPointsHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("MealTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumOfPeople")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.HasKey("OrderId");

                    b.HasIndex("AccountId");

                    b.HasIndex("LoyalPointsHistoryId");

                    b.HasIndex("OrderTypeId");

                    b.HasIndex("StatusId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.OrderDetail", b =>
                {
                    b.Property<Guid>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ComboId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DishSizeDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderDetailStatusId")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadyToServeTime")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("ComboId");

                    b.HasIndex("DishSizeDetailId");

                    b.HasIndex("OrderDetailStatusId");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderSessionId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.OrderSession", b =>
                {
                    b.Property<Guid>("OrderSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderSessionNumber")
                        .HasColumnType("int");

                    b.Property<int>("OrderSessionStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderSessionTime")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderSessionId");

                    b.HasIndex("OrderSessionStatusId");

                    b.ToTable("OrderSession");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.OTP", b =>
                {
                    b.Property<Guid>("OTPId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiredTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("OTPId");

                    b.HasIndex("AccountId");

                    b.ToTable("OTPs");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Rating", b =>
                {
                    b.Property<Guid>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OrderDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PointId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RatingId");

                    b.HasIndex("CreateBy");

                    b.HasIndex("OrderDetailId");

                    b.HasIndex("PointId");

                    b.HasIndex("UpdateBy");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Room", b =>
                {
                    b.Property<Guid>("TableRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TableRatingId");

                    b.ToTable("TableRatings");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.StoreCredit", b =>
                {
                    b.Property<Guid>("StoreCreditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StoreCreditId");

                    b.HasIndex("AccountId");

                    b.ToTable("StoreCredits");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Table", b =>
                {
                    b.Property<Guid>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TableSizeId")
                        .HasColumnType("int");

                    b.HasKey("TableId");

                    b.HasIndex("RoomId");

                    b.HasIndex("TableSizeId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.TableDetail", b =>
                {
                    b.Property<Guid>("TableDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TableDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("TableId");

                    b.ToTable("ReservationTableDetail");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Tag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Token", b =>
                {
                    b.Property<Guid>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessTokenValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDateAccessToken")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateRefreshToken")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceIP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiryTimeAccessToken")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryTimeRefreshToken")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshTokenValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TokenId");

                    b.HasIndex("AccountId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<Guid?>("StoreCreditId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TransationStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("StoreCreditId");

                    b.HasIndex("TransactionTypeId");

                    b.HasIndex("TransationStatusId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Blog", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Account", "CreateByAccount")
                        .WithMany()
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Account", "UpdateByAccount")
                        .WithMany()
                        .HasForeignKey("UpdateBy");

                    b.Navigation("CreateByAccount");

                    b.Navigation("UpdateByAccount");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Combo", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.EnumModels.ComboCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.ComboOptionSet", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Combo", "Combo")
                        .WithMany()
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.EnumModels.DishItemType", "DishItemType")
                        .WithMany()
                        .HasForeignKey("DishItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("DishItemType");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.ComboOrderDetail", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.DishCombo", "DishCombo")
                        .WithMany()
                        .HasForeignKey("DishComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.OrderDetail", "OrderDetail")
                        .WithMany()
                        .HasForeignKey("OrderDetailId");

                    b.Navigation("DishCombo");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.ConfigurationVersion", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Configuration", "Configuration")
                        .WithMany()
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.CouponProgram", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.CustomerInfoAddress", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Device", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Dish", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.EnumModels.DishItemType", "DishItemType")
                        .WithMany()
                        .HasForeignKey("DishItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DishItemType");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.DishCombo", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.ComboOptionSet", "ComboOptionSet")
                        .WithMany()
                        .HasForeignKey("ComboOptionSetId");

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.DishSizeDetail", "DishSizeDetail")
                        .WithMany()
                        .HasForeignKey("DishSizeDetailId");

                    b.Navigation("ComboOptionSet");

                    b.Navigation("DishSizeDetail");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.DishSizeDetail", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId");

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.EnumModels.DishSize", "DishSize")
                        .WithMany()
                        .HasForeignKey("DishSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("DishSize");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.DishTag", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId");

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId");

                    b.Navigation("Dish");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Image", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Blog", "Blog")
                        .WithMany()
                        .HasForeignKey("BlogId");

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Combo", "Combo")
                        .WithMany()
                        .HasForeignKey("ComboId");

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId");

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId");

                    b.Navigation("Blog");

                    b.Navigation("Combo");

                    b.Navigation("Dish");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.LoyalPointsHistory", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Order", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.LoyalPointsHistory", "LoyalPointsHistory")
                        .WithMany()
                        .HasForeignKey("LoyalPointsHistoryId");

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.EnumModels.OrderType", "OrderType")
                        .WithMany()
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.EnumModels.OrderStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("LoyalPointsHistory");

                    b.Navigation("OrderType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.OrderDetail", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Combo", "Combo")
                        .WithMany()
                        .HasForeignKey("ComboId");

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.DishSizeDetail", "DishSizeDetail")
                        .WithMany()
                        .HasForeignKey("DishSizeDetailId");

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.EnumModels.OrderDetailStatus", "OrderDetailStatus")
                        .WithMany()
                        .HasForeignKey("OrderDetailStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.OrderSession", "OrderSession")
                        .WithMany()
                        .HasForeignKey("OrderSessionId");

                    b.Navigation("Combo");

                    b.Navigation("DishSizeDetail");

                    b.Navigation("Order");

                    b.Navigation("OrderDetailStatus");

                    b.Navigation("OrderSession");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.OrderSession", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.EnumModels.OrderSessionStatus", "OrderSessionStatus")
                        .WithMany()
                        .HasForeignKey("OrderSessionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderSessionStatus");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.OTP", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Rating", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Account", "CreateByAccount")
                        .WithMany()
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.OrderDetail", "OrderDetail")
                        .WithMany()
                        .HasForeignKey("OrderDetailId");

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.EnumModels.RatingPoint", "Point")
                        .WithMany()
                        .HasForeignKey("PointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Account", "UpdateByAccount")
                        .WithMany()
                        .HasForeignKey("UpdateBy");

                    b.Navigation("CreateByAccount");

                    b.Navigation("OrderDetail");

                    b.Navigation("Point");

                    b.Navigation("UpdateByAccount");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.StoreCredit", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Table", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.EnumModels.TableSize", "TableSize")
                        .WithMany()
                        .HasForeignKey("TableSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("TableSize");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.TableDetail", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Token", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TPRestaurent.BackEndCore.Domain.Models.Transaction", b =>
                {
                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.EnumModels.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.StoreCredit", "StoreCredit")
                        .WithMany()
                        .HasForeignKey("StoreCreditId");

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.EnumModels.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPRestaurent.BackEndCore.Domain.Models.EnumModels.TransationStatus", "TransationStatus")
                        .WithMany()
                        .HasForeignKey("TransationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PaymentMethod");

                    b.Navigation("StoreCredit");

                    b.Navigation("TransactionType");

                    b.Navigation("TransationStatus");
                });
#pragma warning restore 612, 618
        }
    }
}
